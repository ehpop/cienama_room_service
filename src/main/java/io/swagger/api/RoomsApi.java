/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.41).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Room;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-03-31T17:46:47.268366723Z[GMT]")
@Validated
public interface RoomsApi {

    @Operation(summary = "Get all rooms", description = "", tags={ "Rooms" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of all rooms", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Room.class)))) })
    @RequestMapping(value = "/rooms",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Room>> roomsGet();


    @Operation(summary = "Delete a room by ID", description = "", tags={ "Rooms" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Room deleted"),
        
        @ApiResponse(responseCode = "404", description = "Room not found") })
    @RequestMapping(value = "/rooms/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> roomsIdDelete(@Min(1)@Parameter(in = ParameterIn.PATH, description = "ID of the room to delete", required=true, schema=@Schema(allowableValues={ "1" }, minimum="1"
)) @PathVariable("id") Integer id);


    @Operation(summary = "Get a room by ID", description = "", tags={ "Rooms" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The requested room", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Room.class))),
        
        @ApiResponse(responseCode = "404", description = "Room not found") })
    @RequestMapping(value = "/rooms/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Room> roomsIdGet(@Min(1)@Parameter(in = ParameterIn.PATH, description = "ID of the room to get", required=true, schema=@Schema(allowableValues={ "1" }, minimum="1"
)) @PathVariable("id") Integer id);


    @Operation(summary = "Update a room by ID", description = "", tags={ "Rooms" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The updated room", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Room.class))),
        
        @ApiResponse(responseCode = "404", description = "Room not found") })
    @RequestMapping(value = "/rooms/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Room> roomsIdPut(@Min(1)@Parameter(in = ParameterIn.PATH, description = "ID of the room to update", required=true, schema=@Schema(allowableValues={ "1" }, minimum="1"
)) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Room body);


    @Operation(summary = "Create a new room", description = "", tags={ "Rooms" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The created room", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Room.class))) })
    @RequestMapping(value = "/rooms",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Room> roomsPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Room body);

}

