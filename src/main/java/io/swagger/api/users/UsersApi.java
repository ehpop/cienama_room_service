/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.44).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api.users;

import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-06-01T22:20:35.081630147Z[GMT]")
@Validated
public interface UsersApi {

        @Operation(summary = "Retrieve all users", description = "", tags = { "Users" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "A list of all users", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))) })
        @RequestMapping(value = "/users", produces = { "application/json" }, method = RequestMethod.GET)
        ResponseEntity<List<User>> usersGet();

        @Operation(summary = "Delete a user by ID", description = "", tags = { "Users" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "204", description = "User deleted successfully"),

                        @ApiResponse(responseCode = "404", description = "User not found") })
        @RequestMapping(value = "/users/{id}", method = RequestMethod.DELETE)
        ResponseEntity<Void> usersIdDelete(
                        @Parameter(in = ParameterIn.PATH, description = "ID of the user to delete", required = true, schema = @Schema()) @PathVariable("id") String id);

        @Operation(summary = "Retrieve a user by ID", description = "", tags = { "Users" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "User found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),

                        @ApiResponse(responseCode = "404", description = "user not found") })
        @RequestMapping(value = "/users/{id}", produces = { "application/json" }, method = RequestMethod.GET)
        ResponseEntity<User> usersIdGet(
                        @Parameter(in = ParameterIn.PATH, description = "ID of the user to retrieve", required = true, schema = @Schema()) @PathVariable("id") String id);

        @Operation(summary = "Update a User by ID", description = "", tags = { "Users" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "User updated successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),

                        @ApiResponse(responseCode = "404", description = "User not found") })
        @RequestMapping(value = "/users/{id}", produces = { "application/json" }, consumes = {
                        "application/json" }, method = RequestMethod.PUT)
        ResponseEntity<User> usersIdPut(
                        @Parameter(in = ParameterIn.PATH, description = "ID of the user to update", required = true, schema = @Schema()) @PathVariable("id") String id,
                        @Parameter(in = ParameterIn.DEFAULT, description = "User object to update", required = true, schema = @Schema()) @Valid @RequestBody User body);

        @Operation(summary = "Post new User", description = "", tags = { "Users" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "201", description = "User created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),

                        @ApiResponse(responseCode = "400", description = "Invalid input") })
        @RequestMapping(value = "/users", produces = { "application/json" }, consumes = {
                        "application/json" }, method = RequestMethod.POST)
        ResponseEntity<User> usersPost(
                        @Parameter(in = ParameterIn.DEFAULT, description = "User object to be created", required = true, schema = @Schema()) @Valid @RequestBody User body);

}
