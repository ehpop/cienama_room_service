/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.44).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api.complaints;

import io.swagger.model.Complaint;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-06-01T22:20:35.081630147Z[GMT]")
@Validated
public interface ComplaintsApi {

    @Operation(summary = "Get all Complaints", description = "", tags={ "Complaints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Complaint.class)))) })
    @RequestMapping(value = "/complaints",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Complaint>> complaintsGet();


    @Operation(summary = "Delete a Complaint by ID", description = "", tags={ "Complaints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Complaint deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "Complaint not found") })
    @RequestMapping(value = "/complaints/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> complaintsIdDelete(@Parameter(in = ParameterIn.PATH, description = "ID of the Complaint to delete", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Retrieve a Complaint by ID", description = "", tags={ "Complaints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Complaint found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Complaint.class))),
        
        @ApiResponse(responseCode = "404", description = "Complaint not found") })
    @RequestMapping(value = "/complaints/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Complaint> complaintsIdGet(@Parameter(in = ParameterIn.PATH, description = "ID of the Complaint to retrieve", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Update a Complaint by ID", description = "", tags={ "Complaints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Complaint updated successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Complaint.class))),
        
        @ApiResponse(responseCode = "404", description = "Complaint not found") })
    @RequestMapping(value = "/complaints/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Complaint> complaintsIdPut(@Parameter(in = ParameterIn.PATH, description = "ID of the Complaint to update", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "Complaint object to update", required=true, schema=@Schema()) @Valid @RequestBody Complaint body);


    @Operation(summary = "Post new Complaint", description = "", tags={ "Complaints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Complaint created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Complaint.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input") })
    @RequestMapping(value = "/complaints",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Complaint> complaintsPost(@Parameter(in = ParameterIn.DEFAULT, description = "Complaint object to be created", required=true, schema=@Schema()) @Valid @RequestBody Complaint body);

}

